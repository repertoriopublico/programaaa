HTML:

<!DOCTYPE html>
<html lang="en" style="height: 100%">
    <head>
@@ -79,3 +81,476 @@
        </div>
    </body>
</html>

Bracket.js 

/*===========================*/
/*======== Bracket ==========*/
/*===========================*/
//  <div id="bracket">
//      <div id="be-row-ROW" class="be-row">
//          <div></div>
//          <div id="be-NAME" class="be">
//              <div class="be-btn">
//                  <img src="./img/revert.png">
//              </div>
//              <div class="be-name">NAME</div>
//              <div class="be-btn">
//                  <img src="./img/advance.png">
//              </div>
//          </div>
//      </div>
//  </div>


class Bracket {
    constructor(entries) {
        this.RawEntries = deepCopy(entries);

        // determine bracket dimensions
        let nearestP2 = 2**(Math.ceil(Math.log2(entries.length)))
        this.Height = 2*nearestP2 - 1;
        this.Depth = Math.log2(nearestP2) + 1;

        // make a filled list of Entries with BYEs
        let prettyEntries = deepCopy(entries);
        for (let i = prettyEntries.length; i < nearestP2; i++) {
            prettyEntries.push(new Entry(BYE));
        }
        // swap prettyEntries to set byes by default
        for (let i = 1; i < nearestP2/2; i+=2) {
            let swap = prettyEntries[i];
            prettyEntries[i] = prettyEntries[nearestP2-i];
            prettyEntries[nearestP2-i] = swap;
        }
        // add in TBDs to prettyEntries
        for (let i = 1; i < prettyEntries.length; i++) {
            if (i % 2 == 1) {
                prettyEntries.splice(i, 0, new Entry(TBD));
            }
        }
        this.PrettyEntries = prettyEntries;

        // fill initial bracket
        this.makeBracket();
    }

    makeBracket() {
        // make be-rows and insert PrettyEntries
        for (let i = 0; i < this.Height; i++) {
            let prettyEntry = this.PrettyEntries[i];

            // BEE row
            let bEERowElement = document.createElement("div");
            bEERowElement.id = ID_BE_ROW + i;
            bEERowElement.className = CLASS_BE_ROW;
            bEERowElement.style.width = 100 + "%";

            // BEE
            let bEE = document.createElement("div");
            bEE.id = ID_BE + prettyEntry.Name;
            bEE.className = CLASS_BE;
            bEE.style.width = 100 / this.Depth + "%";

            //      BEE REVERT ARROW
            let bEERevertElement = document.createElement("div");
            bEERevertElement.className = CLASS_BE_BTN;
            bEERevertElement.style.visibility = "hidden";
            bEERevertElement.setAttribute('onclick', "revertRowEntry(this.parentNode.parentNode)");

            let bEERevertImgElement = document.createElement("img");
            bEERevertImgElement.src = IMG_REVERT;
            bEERevertElement.appendChild(bEERevertImgElement);

            //      BEE NAME
            let bEENameElement = document.createElement("div");
            bEENameElement.className = CLASS_BE_NAME + " " + CLASS_VERDANA_GRAY;
            bEENameElement.innerText = prettyEntry.Name; 
            bEE.appendChild(bEENameElement);

            //      BEE ADVANCE ARROW
            let bEEAdvanceElement = document.createElement("div");
            bEEAdvanceElement.className = CLASS_BE_BTN;
            bEEAdvanceElement.style.visibility = "hidden";
            bEEAdvanceElement.setAttribute('onclick', "advanceRowEntry(this.parentNode.parentNode)");

            let bEEAdvancImgElement = document.createElement("img");
            bEEAdvancImgElement.src = IMG_ADVANCE;
            bEEAdvanceElement.appendChild(bEEAdvancImgElement);

            // APPEND ELEMENTS
            bEE.appendChild(bEERevertElement);
            bEE.appendChild(bEENameElement);
            bEE.appendChild(bEEAdvanceElement);
            bEERowElement.appendChild(bEE);
            _B_Element.appendChild(bEERowElement);
            _B_Row_Elements.push(bEERowElement);
        }

        // offset entries to make the bracket shape
        // Go through oddly indexed powers of two that are less than the length of PrettyEntries
        //  2, 4, 8, ...
        // (2, 4, 6, ...), (4, 8, 12, ...), (8, 16, 24, ...), ...
        // Getting powers of two is easy so use (i-1)

        for(let i = 2; i < this.PrettyEntries.length; i *= 2) {
            for (let ei = i; ei < this.PrettyEntries.length; ei+=i) {
                let spacerE = document.createElement("div");
                spacerE.style.width = 100 / this.Depth + "%";                

                _B_Row_Elements[ei-1].prepend(spacerE);
            }
        }

        // advance any entries that have BYEs first round. also adds advance arrows to entries
        // Check all even indexes if they are BYEs
        for (let i = 0; i < this.PrettyEntries.length; i+=4) {
            if (this.PrettyEntries[i].Name == BYE) {
                // advance this.PrettyEntries[i+2].Name
                let winnerName = this.PrettyEntries[i+2].Name;

                let winnerE = _B_Row_Elements[i+1].lastChild;
                winnerE.id = ID_BE + winnerName;
                winnerE.lastChild.style.visibility = "visible";

                let winnerNameE = winnerE.childNodes[1];
                winnerNameE.innerText = winnerName;
            }
            else if (this.PrettyEntries[i+2].Name == BYE) {
                // advance this.PrettyEntries[i].Name
                let winnerName = this.PrettyEntries[i].Name;

                let winnerE = _B_Row_Elements[i+1].lastChild;
                winnerE.id = ID_BE + winnerName;
                winnerE.lastChild.style.visibility = "visible";

                let winnerNameE = winnerE.childNodes[1];
                winnerNameE.innerText = winnerName;
            }
            else {
                _B_Row_Elements[i].lastChild.lastChild.style.visibility = "visible";
                _B_Row_Elements[i+2].lastChild.lastChild.style.visibility = "visible";
            }
        }
    }

    hideArrowsFrom(BEE) {
        let vis = "hidden";
        BEE.firstChild.style.visibility = vis;
        BEE.lastChild.style.visibility = vis;
    }

    showArrowsFor(BEE) {
        // Don't show arrows for TBDs
        if (BEE.childNodes[1].innerText != TBD) {
            let vis = "visible";
            let thisSpacing = BEE.parentNode.childNodes.length - 1;

            // first round entries dont need revert arrow
            if (0 < thisSpacing) {
                BEE.firstChild.style.visibility = vis;
            }
            // winner doesn't need advance arrow 
            if (thisSpacing < this.Depth - 1) {
                BEE.lastChild.style.visibility = vis;
            }
            // check if this entry had first round bye
            if (thisSpacing == 1) {
                let thisRowIndex = parseInt(BEE.parentNode.id.split(ID_BE_ROW)[1]);
                let prevMatchupTopRow = document.getElementById(ID_BE_ROW + (thisRowIndex-1));
                let prevMatchupBotRow = document.getElementById(ID_BE_ROW + (thisRowIndex+1));
                if (prevMatchupTopRow.lastChild.childNodes[1].innerText == BYE || prevMatchupBotRow.lastChild.childNodes[1].innerText == BYE) {
                    BEE.firstChild.style.visibility = "hidden";
                }
            }
        }
    }

    advanceRowEntry(thisBracketRow) {
        let bracketIndexSplit = thisBracketRow.id.split("-");
        let thisIndex = parseInt(bracketIndexSplit[bracketIndexSplit.length-1]);

        let thisSpacing = thisBracketRow.childElementCount - 1;
        let matchupSize = 2**(thisSpacing);

        let topIndex = thisIndex - matchupSize;
        let topRow = document.getElementById(ID_BE_ROW + topIndex);

        let botIndex = thisIndex + matchupSize;
        let botRow = document.getElementById(ID_BE_ROW + botIndex);

        let matchupWinnerRow = null;
        let matchupLoserRow = null;

        // Matchup out of bracket bounds (below)  OR  winner is the top row
        if (_B_Row_Elements.length - 1 < botIndex || (topRow != null && topRow.childElementCount - 1 == thisSpacing + 1)) {
            matchupWinnerRow = topRow;
            matchupLoserRow = document.getElementById(ID_BE_ROW + (topIndex - matchupSize));
        }
        // Matchup out of bracket bounds (over)  OR  winner is the bottom row
        else if (topIndex < 0 || (botRow != null && botRow.childElementCount - 1 == thisSpacing + 1)) {
            matchupWinnerRow = botRow;
            matchupLoserRow = document.getElementById(ID_BE_ROW + (botIndex + matchupSize));
        }
        else {
            let msg = "issue advancing: " + winnerName;
            console.log(msg);
            alert(msg);
        }

        // Set winner
        let winnerName = thisBracketRow.lastChild.childNodes[1].innerText;
        matchupWinnerRow.lastChild.id = ID_BE + winnerName;
        matchupWinnerRow.lastChild.childNodes[1].innerText = winnerName;
        this.showArrowsFor(matchupWinnerRow.lastChild);

        // Remove advance/revert arrows from the advanced entry and the matchup loser
        this.hideArrowsFrom(thisBracketRow.lastChild);
        if (matchupLoserRow != null) {
            this.hideArrowsFrom(matchupLoserRow.lastChild);
        }
    }

    revertRowEntry(thisBracketRow) {
        let bracketIndexSplit = thisBracketRow.id.split("-");
        let thisIndex = parseInt(bracketIndexSplit[bracketIndexSplit.length-1]);

        let thisSpacing = thisBracketRow.childElementCount - 1;
        let prevMatchupSize = 2**(thisSpacing - 1);

        // reset the reverting element to TBD
        thisBracketRow.lastChild.childNodes[1].innerText = TBD;
        thisBracketRow.lastChild.id = ID_BE + TBD;
        this.hideArrowsFrom(thisBracketRow.lastChild);

        // go back and add arrows to the previous matchup
        // need to check if they can have revert arrows
        let prevMatchupTopRowIndex = thisIndex - prevMatchupSize;
        let prevMatchupTopRow = document.getElementById(ID_BE_ROW + prevMatchupTopRowIndex);
        let prevMatchupBotRowIndex = thisIndex + prevMatchupSize;
        let prevMatchupBotRow = document.getElementById(ID_BE_ROW + prevMatchupBotRowIndex);

        // show arrows for the previous matchup
        this.showArrowsFor(prevMatchupTopRow.lastChild);
        this.showArrowsFor(prevMatchupBotRow.lastChild);
    }
}

Controller.js

/*===========================*/
/*====== HTML -> JS =========*/
/*===========================*/

// Entries
function addEntry() {
    function isValidEntry(entryName) {
        if (INVALID_ENTRY_NAMES.includes(entryName)){
            return false;
        }
        for (let i = 0; i < _E_List.Entries.length; i++){
            if (_E_List.Entries[i].Name == entryName){
                return false;
            }
        }
        return true;
    }

    let entryName = document.getElementById(ID_E_INPUT).value;
    if (isValidEntry(entryName)){
        // Add entry to Entries object
        _E_List.addEntry(new Entry(entryName));

        // Reset the input field
        document.getElementById(ID_E_INPUT).value = "";
    }
    else{
        alert("invalid entry name - '" + entryName + "'");
    }
}

function deleteEntry(entryElement) {
    // remove this entry from Entries
    _E_List.removeEntry(entryElement);
}

// Bracket
function makeBracket() {
    let el = _E_List.Entries.length;
    if (el == 0) {
        alert("no entries added");
    }
    else if (el == 1) {
        alert("only one entry added: '" + _E_List.Entries[0].Name + "'");
    }
    else{
        // Clear the old bracket
        _B_Element.innerText = "";
        _B_Row_Elements = [];

        // Making the Bracket takes care of filling the initial BYEs and TBDs
        // also takes care of offsetting the DOM TBDs
        _B = null;
        _B = new Bracket(_E_List.Entries);
    }
}

function advanceRowEntry(thisBracketRow) {
    _B.advanceRowEntry(thisBracketRow);
}

function revertRowEntry(thisBracketRow) {
    _B.revertRowEntry(thisBracketRow);
}

Entrieslist.js: 

                                                   /*===========================*/
/*====== EntriesList ========*/
/*===========================*/

class EntriesList {
    constructor() {
        this.Entries = [];
    }

    addEntry(entry) {
        function addDeleteButtonToNewEntry(newEntryElement) {
            let button = document.createElement("img");
            button.src = IMG_DELETE;
            button.className = CLASS_EL_DELETE;
            button.setAttribute('onclick', "deleteEntry(this.parentNode)");
            button.setAttribute("alt", "delete entry button");
            newEntryElement.appendChild(button);
        }

        // Create newEntryElement
        let newEntryElement = document.createElement("div");
        newEntryElement.className = CLASS_EL_ROW;

        // Add name to newEntryElement
        let newEntryElementName = document.createElement("div");
        newEntryElementName.innerText = entry.Name;
        newEntryElementName.className = CLASS_EL_NAME + " " + CLASS_VERDANA_GRAY;
        newEntryElement.appendChild(newEntryElementName);

        // Add delete button to newEntryElement
        addDeleteButtonToNewEntry(newEntryElement);

        // Add newEntryElement to EntryListElement
        _E_List_Element.appendChild(newEntryElement);
        this.Entries.push(entry);
    }

    removeEntry(entryElement) {
        for (let i = 0; i < this.Entries.length; i++){
            if (this.Entries[i].Name == entryElement.firstElementChild.innerText){
                this.Entries.splice(i, 1);
                break;
            }
        }
        entryElement.remove();
    }
}

Entry.js:

/*===========================*/
/*========= Entry ===========*/
/*===========================*/

class Entry {
    constructor(name) {
        this.Name = name;
        this.W = 0;
        this.L = 0;
    }
}

Event_listerners.js:

/*===========================*/
/*===== Event Listeners =====*/
/*===========================*/

window.onload = function() {
    // Set Global Elements
    _E_List = new EntriesList();
    _E_List_Element = document.getElementById(ID_E_LIST);
    _B_Element = document.getElementById(ID_B);
    _B_Row_Elements = [];

    // Allows user to shortcut clicking the 'add-entry-btn' by pressing 'Enter' 
    document.getElementById(ID_E_INPUT).addEventListener('keyup', function(event) {
        if (event.key == "Enter") {
            event.preventDefault();
            document.getElementById(ID_ADD_ENTRY_BTN).click();
        }
    });
}

// Prevents unintentional refreshing, which loses entry data
window.onbeforeunload = function() {
    return "Data will be lost if you leave the page, are you sure?";
}
Global.js:

/*===========================*/
/*======== Globals ==========*/
/*===========================*/
let _E_List;
let _E_List_Element;
let _B_Element;
let _B_Row_Elements;

const IMG_DELETE = "./img/delete.png";
const IMG_ADVANCE = "./img/advance.png";
const IMG_REVERT = "./img/revert.png";

// DOM IDs
/* !!! THESE NEED TO MATCH HTML !!! */
const ID_MAKE_BRACKET_BTN = "make-bracket-btn";
const ID_ADD_ENTRY_BTN = "add-entry-btn";

const ID_E_INPUT = "e-input";
const ID_E_LIST = "e-list";

const ID_B = "bracket";
const ID_BE_ROW = "be-row-";
const ID_BE = "be-";

const CLASS_VERDANA_GRAY = "verdana-gray";
const CLASS_ENTRY = "entry";

const CLASS_EL_ROW = "el-row";
const CLASS_EL_NAME = "el-name";
const CLASS_EL_DELETE = "el-delete";

const CLASS_BE_ROW = "be-row";
const CLASS_BE = "be";
const CLASS_BE_NAME = "be-name";
const CLASS_BE_BTN = "be-btn";

// NAMES
const BYE = "BYE";
const TBD = "TBD";
const INVALID_ENTRY_NAMES = ["", BYE, TBD];

// DIMENSIONS
const BTN_SIZE = 20 + "px";
const BRACKET_ENTRY_HEIGHT = 30 + "px";

Utils.js:

/*===========================*/
/*======= Utilities =========*/
/*===========================*/

function deepCopy(array) {
    newArr = [];
    array.forEach(element => {
        newArr.push(element);
    });
    return newArr;
}
